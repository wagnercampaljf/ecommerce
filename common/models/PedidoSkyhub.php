<?php

namespace common\models;

use console\models\SkyhubClient;

use yii\db\Exception;
use yii\helpers\Json;

/**
 * This is the model class for table "pedido_skyhub".
 *
 * @property string $id
 * @property string $canal
 * @property string $dt_referencia
 * @property double $valor_total
 * @property string $comprador
 * @property string $transportadora
 * @property string $valor_frete
 * @property string $filial_id
 * @property string $status
 * @property string $documento
 * @property string $pagamento
 * @property string $dt_prevista
 * @property string $items
 * @property string $endereco
 * @property string $email
 * @property string $telefone
 */
class PedidoSkyhub extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'pedido_skyhub';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'documento', 'canal', 'dt_referencia', 'comprador', 'transportadora', 'filial_id', 'status', 'pagamento', 'dt_prevista', 'items', 'endereco', 'email', 'telefone'], 'required'],
            [['id', 'canal', 'comprador', 'transportadora', 'status', 'pagamento', 'dt_prevista', 'items', 'endereco', 'email', 'telefone'], 'string'],
            [['dt_referencia'], 'safe'],
            [['valor_total', 'valor_frete'], 'number'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'canal' => 'Canal',
            'dt_referencia' => 'Dt Referencia',
            'valor_total' => 'Valor Total',
            'comprador' => 'Comprador',
            'transportadora' => 'Transportadora',
            'valor_frete' => 'Valor Frete',
            'status' => 'Status',
            'pagamento' => 'Pagamento',
            'dt_prevista' => 'Dt Prevista',
            'items' => 'Items',
            'endereco' => 'Endereco',
            'email' => 'Email',
            'telefone' => 'Telefone',
        ];
    }

    public function mudarStatus($novoStatus)
    {
        $skyhub = new SkyhubClient();
        switch ($novoStatus) {
            case 'APPROVED':
                $response = $skyhub->orders()->aprove($this->id);
                break;
            case 'SHIPPED':
                $shipmentData = [
                    "code" => $this->id,
                    "items" => $this->items
                ];
                $response = $skyhub->orders()->ship($this->id, $shipmentData);
                break;
            case 'DELIVERED':
                $response = $skyhub->orders()->delivery($this->id);
                break;
            case 'CANCELED':
                $response = $skyhub->orders()->cancel($this->id);
                break;
            default:
                $response = false;
                break;
        }

        if ($response->isOk) {
            $this->status = $novoStatus;
            $this->save();
        }
    }

    /**
     * @param array $data
     * @author TÃ©rcio Garcia 21/09/2017
     */
    public static function createFromSkyhubData($data)
    {
        try {

            $pedido = new PedidoSkyhub();
            $sku = $data['items'][0]['id'];
            $filial = Filial::find()->joinWith('produtoFilials')->where(['produto_filial.id' => $sku])->one();

            $pedido->filial_id = $filial->id;
            $pedido->id = $data['code'];
            $pedido->valor_total = $data['total_ordered'];
            $pedido->valor_frete = $data['shipping_cost'];
            $pedido->dt_referencia = $data['placed_at'];
            $pedido->canal = $data['channel'];
            $pedido->dt_prevista = $data['estimated_delivery'];
            $pedido->transportadora = $data['shipping_method'];
            $pedido->endereco = Json::encode($data['shipping_address']);
            if (isset($data['customer'])) {
                $pedido->comprador = $data['customer']['name'];
                $pedido->documento = $data['costumer']['vat_number'];
                $pedido->telefone = $data['customer']['phones'][0];
                $pedido->email = $data['customer']['email'];
            }
            $pedido->items = Json::encode($data['items']);
            $pedido->status = $data['status']['type'];
            $pedido->pagamento = Json::encode($data['payments']);
            $pedido->save();
            var_dump($pedido->errors);

        } catch (Exception $exception) {
            return false;
        }
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->items = Json::decode($this->items);
        $this->pagamento = Json::decode($this->pagamento);
        $this->endereco = Json::decode($this->endereco);
    }

    public function update($runValidation = true, $attributeNames = null)
    {
        $this->items = Json::encode($this->items);
        $this->pagamento = Json::encode($this->pagamento);
        $this->endereco = Json::encode($this->endereco);
        return parent::update($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }


}
